from datetime import datetime
class BankAccount:
    bank="KCB"
    deposit_history = []
    loan = {}
    loan_balance = 0
    applied_for_loan = False
    # Play around with these
    _MAXIMUM_LOAN_BORROWABLE = 3000000
    _LOAN_INTEREST_RATE = .12


    #Constructor
    def __init__(self, first_name, second_name):
        self.first_name=first_name
        self.second_name=second_name
        self.balance=0

    #Returns the current time in string form
    def _getCurrentTime(self):
        now = datetime.now()
        now_formatted = now.strftime("%b %d %Y, %H:%M:%S")
        return now_formatted

    def account_name(self):
        name= "{} account for {} {} ".format(self.bank, self.first_name,self.second_name)
        return name
    def deposit(self,amount):
        if amount >0:
            self.balance+=amount
            timeDate = self._getCurrentTime()
            transaction_details = {"amount": amount, "date":timeDate}
            self.deposit_history.append(transaction_details)
            print("You have deposited {} to your account at {}".format(amount, timeDate))
        else:
            print("Too low ")


    def withdraw(self, amount):
        if amount > 0:
            self.balance -= amount
            print("You have withdrawed {} from your account".format(amount))
        else:
            print("Amount too low")
    def get_balance(self):
        return "The balance of {} is {} ".format(self.account_name(),self.balance)

    def get_statement(self):
        for statement_item in self.deposit_history:
            print("On",statement_item['date'], ", you deposited KES", statement_item['amount'])

    def getLoanBalance(self):
        print("Your balance is KES",self.loan_balance,"for loan KES", self.loan["amount_borrowed"],"Borrowed on", self.loan["date"])
    def requestLoan(self, amount):
        # When customer has no Loan balance Give a loan
        if not self.loan_balance > 0:
            timeDate = self._getCurrentTime()
            self.loan["date"] = timeDate
            self.loan["amount_borrowed"] = amount
            self.loan_balance += amount
            def repay_loan(self, amount):
            if amount <= 0:
               print("You cannot repay with that amount")
            elif self.loan == 0:
                  print("You do not have a loan at the moment")
            elif amount > self.loan
                print("Your loan is {}, please enter an amount that is less or equal".format(self.loan))
            else:
                 self.loan == amount                                
                 time = datetime.now()
                 repayment = {
                     "time": time,
                     "amount": amount
                 }
                 self.loan_repayments.append(repayment)
                 print("You have repaid your loan with {}. Your loan balance is {}".format(amount, self.loan))
            def loan_repayment_statement(self):
                for repayment in self.loan_repayment:
                    time = repayment['time']
                    amount = repayment['amount']
                    formatted_time = self.get_formatted_time(time)
                    statement = "You repaid {} on {}".format(amount, formatted_time)
                    print(statement)                                                                                                                                                                                                                                                                                                                                                                                            
        #Else Deny loan
        else:
            print("Err:Loan Request Failed Reason:", end="")
            print(self.getLoanBalance())

    def payLoan(self,amount):
        if self.loan_balance == 0:
            print("You have no loan balance")
        elif amount > self.loan_balance:
            self.loan_balance = 0
        elif amount <= self.loan_balance:
            self.loan_balance -= amount

        return


acc1=BankAccount("Rachel","Oyugi")
acc2=BankAccount("Buyole", "Isacko")

acc1.deposit(-1000)
acc2.deposit(50)
acc1.deposit(100)
acc2.deposit(30)
acc1.withdraw(10)
acc2.withdraw(30)
acc1.withdraw(20)
acc2.withdraw(10)

acc2.get_statement()
acc1.requestLoan(2000)
acc1.requestLoan(899)
acc1.payLoan(200)
acc1.getLoanBalance()
print(acc1.get_balance())
print(acc2.get_balance())

print(acc1.account_name())
print(acc2.account_name())

class MobileMoneyAccount(Account):
    def __init__(self, first_name, last_name, phone_number, service_provider):
        self.service_provider = service_provider
        self.airtime = []
        super().__init__(first_name, last_name, phone_number)
    def buy_airtime(self, amount):
        try:
           amount + 1
        except TypeError:
            print("Please enter the amount in figures")
            return
        if amount >self.balance.
           print("You do not have enough balance. Your balance is {}".format(self.balance))
        else:
            self.balance -=amount
            time = datetime.now()
            airtime = {
                "time": time,
                "airtime": amount
            }
            self.airtime.append(airtime)
            print("You have bought airtime worth {} on {}".format(amount, self.get_formatted_time(time)))
            

def paybills(self,amount):
        try: 
            amount-1
        except TypeError:
            print("please enter amount in figures")
            return
        if amount>self.balance:
            print("You have insufficient balance.Your balance is {}".format(self.balance))

        else:
            self.balance-=amount
            time=datetime.now()
            paybills={
                "time":time
                "paybills":amount
            }
            self.paybills.append(paybills)
            print("you have paid bills worth {}.your balance is {}".format(amount,self.get_formatted_time(time)))
    def send_money(self,amount):
        try:
            amount-1
        except TypeError:
            print("please enter amount in figures") 
            return
            if amount>self.balance:
                print("failed.insuffcient fundsin your account.your balance is {}".format(self.balance))
                else:
            self.balance-=amount
            time=datetime.now()
            money={
                "time":time
                "money":amount
            }
            self.money.append(money)
            print(" confirmed  you have sent {} .your balance is {}".format(amount,self.get_formatted_time(time)))
    def receive_money(self):
        time=datetime.now()
        money_received={
            "time":time
            return  "You have received {}.your balance is {}".format(self.get_formatted_time)
            
        }